##############################################
# ローカルタイムと指定した時刻を扱う方法(Time.now)
##############################################

# 「ご注意」
#
# ここではrubyでの説明を行います
# 書き方はほとんど変わらないはずですが、railsの場合、ActiveSupport::TimeWithZoneを使ってください
# example)
# ruby     -> rails
# Time.now -> Time.zone.now

# Time.now
# 何も設定していない場合システムの時刻が返ります（日本時刻が返っています）
p Time.now
# => 2019-10-15 23:36:55 +0900

# newでも同様に返ります
p Time.new
# => 2019-10-15 23:36:55 +0900

# 自分で任意の国の時間にしたい場合
# ENV['TZ'] に
# http://en.wikipedia.org/wiki/List_of_tz_database_time_zones の
# TZ database nameを入れて指定します
# ENV['TZ']='Etc/UTC'

p Time.now
# => 2019-10-15 14:36:55 +0000


##############################################
# 時刻から曜日を確認する方法(sunday? monday? tuesday? wednesday? thursday? friday? saturday?)
##############################################

# 曜日があっていれば trueが返りそうでない場合は falseが返ります
# 下記は火曜日に書いていたので tuesday?だけがtrueで返りました

now1 = Time.now
p now1.sunday?
# => false
p now1.monday?
# => false
p now1.tuesday?
# => true
p now1.wednesday?
# => false
p now1.thursday?
# => false
p now1.friday?
# => false
p now1.saturday?
# => false

# 他にもwdayを使うことで下記の 0~6のどの曜日かを得ることができます
#
# 日曜 0
# 月曜 1
# 火曜 2
# 水曜 3
# 木曜 4
# 金曜 5
# 土曜 6
#
# 上記と同様に火曜日に書いたので 2が返っています

p now1.wday
# => 2


##############################################
# 時刻から秒、分、時、日、月、年をそれぞれ取得するやり方
##############################################

now2 = Time.now
p now2
# => 2019-10-16 00:04:43 +0900

# 秒
p now2.sec
# => 43

# 分
p now2.min
# => 4

# 時
p now2.hour
# => 0

# 日
p now2.mday
# => 16

# 月
p now2.mon
# => 10

# 年
p now2.year
# => 2019


##############################################
# 文字列からTimeオブジェクトを作る方法(parse)
##############################################

# Time.parse('時刻の文字列')
# parseはいくつかのパターンで文字列をTimeオブジェクトに変換してくれますが、
# どれにも当てはまらなかった場合は、strptimeを使って自分で書式をつくることができます

require 'time'
p Time.parse('2019/10/16 17:09:20')
# => 2019-10-16 17:09:20 +0900

p Time.strptime('2019年10月16日 17時09分20秒', '%Y年%m月%d日 %H時%M分%S秒')
# => 2019-10-16 17:09:20 +0900

# %Y 年
# %m 月
# %d 日
# %H 時
# %M 分
# %S 秒

##############################################
# Timeオブジェクトから文字列を整形する(strftime)
##############################################

# strftime('書式')
now3 = Time.now
p now3
# => 2019-10-16 17:19:33 +0900
p now3.strftime('%Y年%m月%d日 %H時%M分%S秒' )
# => "2019年10月16日 17時20分52秒"

# %Y 年
# %m 月
# %d 日
# %H 時
# %M 分
# %S 秒

##############################################
# 時刻の比較( > < <=>)
##############################################

# 比較演算子を使って時刻を比較することができます

day20191016 = Time.parse('2019/10/16 17:09:20')
day20191017 = Time.parse('2019/10/17 17:09:20')

# 16日と17日だと17日のが先なので true
p day20191016 < day20191017
# => true

# 16日と17日だと17日のが先なので false
p day20191016 > day20191017
# => false

# <=>も同様に扱えるので1が返る
p day20191017 <=> day20191016
# => 1

##############################################
# 日付の作成（Date.today Date.new)
##############################################

# 日付だけを扱いたい場合Dateクラスを使う
# 今日を取得したい場合
p Date.today
# => #<Date: 2019-10-16 ((2458773j,0s,0n),+0s,2299161j)>

# Date.new(年, 月, 日)
# 日付を指定してDateオブジェクトを作ることもできる
p Date.new(2019, 4, 1)
# => #<Date: 2019-04-01 ((2458575j,0s,0n),+0s,2299161j)>

##############################################
# 月末の日付の取得
##############################################

# 月末はDateクラスを使って -1日を与えてやると取得できます
# 2019年5月の月末を取得したい場合

p Date.new(2019, 5, -1)
#<Date: 2019-05-31 ((2458635j,0s,0n),+0s,2299161j)>

##############################################
# 昨日、○日前、○週間前、○月前、明日、○週間後、○日後、○ヶ月後などを取得する(active_support/time)
##############################################

require 'active_support/time'

# この記事では2019年10月15日を起点としています
day20191015 = Time.parse('2019/10/15 17:09:20')

# 前のもの

# 1日前（昨日）
p day20191015.yesterday
# => 2019-10-14 17:09:20 +0900

# 1週間前
p day20191015.weeks_ago(1)
# => 2019-10-08 17:09:20 +0900

# 10日前
p day20191015.days_ago(10)
# => 2019-10-05 17:09:20 +0900

# 1ヶ月前
p day20191015.months_ago(1)
# => 2019-09-15 17:09:20 +0900

# 後のもの

# 1日後（明日）
p day20191015.tomorrow
# => 2019-10-16 17:09:20 +0900

# 1週間後
p day20191015.weeks_since(1)
# => 2019-10-22 17:09:20 +0900

# 10日後
p day20191015.days_since(10)
# => 2019-10-25 17:09:20 +0900

# 1ヶ月後
p day20191015.months_since(1)
# => 2019-11-15 17:09:20 +0900
