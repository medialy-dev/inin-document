##############################################
# 配列の作り方
##############################################

# 空配列の作り方

hoge1 = []
p hoge1

# 初期値のある数値の配列の作り方

hoge2 = [1, 3, 5, 7]
p hoge2

# 初期値のある文字列の配列の作り方

hoge3 = %w(a i u e o)
p hoge3

# 初期値のあるシンボルの配列の作り方

hoge4 = %i(a i u e o)
p hoge4

##############################################
# 配列への追加
##############################################

# 演算子(<<)を使って配列を追加する

hoge5 = []
hoge5 << 1
p hoge5

# pushメソッドを使って配列を追加する

hoge6 = []
hoge6.push(1)
p hoge6

##############################################
# 配列(array)から指定位置の要素の取り出し方
##############################################

hoge7 = [1, 3]

# 配列(array)の要素は0から開始
# 上記だと [1, 3] は
# hoge7[0]が1に該当
# hoge7[1]が3に該当

p hoge7[0]
p hoge7[1]

# 配列(array)からfor文で順番に要素を取得する場合eachを使います

hoge7.each do |h|
  p h
end

##############################################
# 配列(array)から要素を削除する
##############################################

# 配列(array)に一致した要素を全て削除する

hoge8 = [1, 1]
hoge8.delete(1)
p hoge8

# 空の配列(array)が返ってくる

# 配列(array)の指定位置の要素を削除する

# これは配列(array)から指定位置の要素の取り出し方（リンク）と同様の位置の指定です

hoge9 = [1, 3]
hoge9.delete_at(0)

##############################################
# 配列(array)から長さを求める
##############################################

hoge10 = [1, 3]
p hoge10.length
p hoge10.size

# lengthまたはsizeを使う。countは内部でeach処理を行い算出しているため遅くなる

##############################################
# 配列(array)から検索する
##############################################

# こちらでまとめているものは、Enumerableモジュールで配列(array)やハッシュの検索によく使われます。
# Enumerableについては別途まとめますがここでは素直な配列(array)検索のみを扱います。

# find 配列(array)から一つを検索する

# 配列(array) [1, 3, 5] の前から順番に条件に合致したものを検索していき
# 合致したものをが見つかった時点で処理が終了します。
# なのでこの場合1より大きいなので3が見つかった時点で処理が終了します。

hoge11 = [1, 3, 5]
p hoge11.find { |n| n > 1 }
# => 3

# 合致するものがない場合はnilが返ります

p hoge11.find { |n| n > 5 }
# => nil

# detectも同義です

p hoge11.detect { |n| n > 5 }
# => nil

# select 配列(array)から条件に合致する配列を作成する

# 条件に合致するものは全て取得して配列が返ります

p hoge11.select { |n| n > 1 }
# => [3, 5]

# 条件に合致したものが無い場合は空の配列が返ります

p hoge11.select { |n| n > 5 }
# => []

# find_allも同義です

p hoge11.find_all { |n| n > 5 }
# => []

##############################################
# 配列(array)で条件に合致するかどうか調べる
##############################################

# 配列(array)の中身を全て見て条件に合致しているものを探す

# 全て合致している場合はtrueが返ります

hoge12 = [1, 3, 5]
p hoge12.all? { |n| n > 0 }
# => true

# 一つでも合致していない場合はfalseが返ります

p hoge12.all? { |n| n > 1 }
# => false

# 配列(array)の中身を見て一つでも条件に合致するものを探す

# 一つでも条件に合致するものがあればtrueが返ります

p hoge12.any? { |n| n > 1 }
# => true

# 一つも合致しない場合falseが返ります

p hoge12.any? { |n| n > 5 }
# => false

##############################################
# 配列(array)から最大値と最小値を求める
##############################################

# 配列(array)から最大値を求める

hoge13 = [1, 3, 5]
p hoge13.max
# => 5

# 配列(array)から最小値を求める

p hoge13.min
# => 1

# 配列(array)から最小値と最大値の配列(array)を取得する

p hoge13.minmax
# => [1, 5]

##############################################
# 配列(array)に含まれる(include)かどうかを調べる
##############################################

# 配列(array)に一つでも含まれていればtrueが返る

hoge14 = %w(a a i u e o)
p hoge14.include?('a')
# => true

# 配列(array)は一つでも含まれていなければfalseが返る

p hoge14.include?('ka')
# => false
