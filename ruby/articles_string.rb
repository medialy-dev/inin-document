##############################################
# 文字列の宣言
##############################################

# 文字列の宣言

hoge1 = 'huga'
p hoge1
# => "huga"

# Stringクラスのインスタンスとしての作成も可能ですが、上で書いたもののほうが楽です

hoge2 = String.new('huga')
p hoge2
# => "huga"

# 何も入れない場合 空文字を返します

hoge3 = String.new
p hoge3
# => ""

##############################################
# 文字列を比較する
##############################################

# 同じ文字列かどうかを比較する場合

p hoge1 == hoge2
# => true

# 文字列を abcdefghijklmnopqrstuvwxyz 順に比較する場合
# 辞書と同じで (小さい) abcdefghijklmnopqrstuvwxyz (大きい)　となる

p 'a' > 'b'
# => false

p 'b' > 'a'
# => true

p 'ba' > 'aa'
# => true

# 宇宙船演算子も同様の扱いとなる

p 'ba' <=> 'aa'
# => 1

##############################################
# 文字列を配列(array)に分離(split)するやり方
##############################################

# splitは文字列を分離するパターンを渡してあげると、分離された配列が返る

# 良く使うシーンだとカンマ区切りを分離したりするときに使える

p 'a,i,u,e,o'.split(',')
# => ["a", "i", "u", "e", "o"]

# パターンにあてはまるものがなかった場合でも、配列の0番目に格納されます

p 'aiueo'.split(',')
# => ["aiueo"]



##############################################
# 文字列の長さ（数）を求める
##############################################

# Ruby 1.9以降を対象として説明します。
# size, lengthは共に文字数を返してくれるので英字であろうが日本語であろうが変わらず文字数が返ってきます

p 'aiueo'.size
# => 5

p 'aiueo'.length
# => 5

p 'あいうえお'.length
# => 5

# また、 aiueoa のaの数を数えたい場合
# countを使うとうまくいきます

p 'aiueoa'.count('a')
# => 2

################################################################
# 文字列の末尾の改行を取り除いたり、末尾の文字を取り除いするやり方(chomp chop)
################################################################

# 末尾の改行を取り除く場合(chomp)

hoge4 = 'huga
'
p hoge4
# => "huga\n"

p hoge4.chomp
# => "huga"

# 末尾の文字を取り除く場合(chop)

hoge5 = 'huga'
p hoge5.chop
# => "hug"

##############################################
# 文字列から整数に変換する(to_i)
##############################################

# to_iは文字列を整数に変換します

p '123'.to_i
# => 123

# 浮動小数点でも整数になります

p '1.11'.to_i
# => 1

# 変換できるところが無い場合0になります

p 'aiueo'.to_i
# => 0

##############################################
# 文字列から浮動小数点に変換する(to_f)
##############################################

# to_fは文字列を浮動小数点に変換します

p '123.45'.to_f
# => 123.45

# to_iと同様に変換できるところが無い場合0.0になります

p 'aiueo'.to_f
# => 0.0

################################################
# 文字列を小文字から大文字に、大文字から小文字に変換する(upcase downcase)
################################################

# 文字列を小文字から大文字に変換する場合
# upcaseは小文字を全て大文字に変換します

p 'aiueo'.upcase
# => "AIUEO"

# 大文字が混じっていた場合でも、全て大文字になります

p 'AiUeO'.upcase
# => "AIUEO"

# 文字列を大文字から小文字に変換する場合
# downcaseは大文字から小文字に変換します

p 'AIUEO'.downcase
# => "aiueo"

##############################################
# 文字列を連結する、文字列を追加する
##############################################

# 文字列を連結するには+でつなぎます

hoge6 = 'aiueo'
hoge7 = 'kakikukeko'
p hoge6 + hoge7
# => "aiueokakikukeko"

# 文字列を追加する別の方法
# << で末尾に次の文字列を追加します

hoge8 = hoge6 << hoge7
p hoge8
# => "aiueokakikukeko"

##############################################
# 文字列をフォーマットから生成する (sprintf %d %f)
##############################################

# 整数
p sprintf('%d', 5)
# => "5"

# 浮動小数点
p sprintf('%f', 5)
# => "5.000000"

# 浮動小数点１桁とかにしたい場合
p sprintf('%.1f', 5)
# => "5.0"

# 同様の書き方でこういう書き方もできますが、他プログラムを触っていた方は上記(sprintf)のがなれていると思います
# "format_string % 値"

p '%d' % 5
# => "5"

# 複数埋め込む場合は後方が配列になります
# "format_string % [値1, 値2]"

p '%d%d' % [5, 6]
# => "56"

##############################################
# 文字列に特定の文字が含まれているか調べる(include?)
##############################################

# string.include?('調べたい文字列')

# 文字列に含まれているかどうかなので、部分一致していてもtrueになります

p 'hoge'.include?('hoge')
# => true

p 'aiueo'.include?('iue')
# => true

# 一致していない場合はfalseを返します

p 'aiueo'.include?('hoge')
# => false

##############################################
# 文字列が空かどうか調べる(empty?)
##############################################

# 文字が空の場合はtrueをそうでない場合はfalseを返します
# string.empty?

p ''.empty?
# => true

p 'hoge'.empty?
# => false
